package main

import "core:math/linalg"

PlayerShipsDef :: struct {
    texture:              cstring,
    thrust_texture:       cstring,
    max_velocity:         f32,
    thrust_vel:           f32,
    thrust_texture_scale: f32,
    texture_id:           int,
    max_life:             f32,
    primary_weapon:       WEAPONS_ID,
    secondary_weapon:     WEAPONS_ID,
    cargo_space:          int,
}

PLAYER_SHIPS_DEFS := []PlayerShipsDef {
    PlayerShipsDef {
        texture = "playerShip1",
        thrust_texture = "fire00.png",
        thrust_vel = 1500,
        thrust_texture_scale = 1.5,
        texture_id = int(TEXTURES_ID.PLAYERSHIP1_BLUE),
        max_life = 1000,
        primary_weapon = WEAPONS_ID.S0,
        secondary_weapon = WEAPONS_ID.DF,
        cargo_space = 2,
    },
    PlayerShipsDef {
        texture = "playerShip2",
        thrust_texture = "fire01.png",
        thrust_vel = 1000,
        thrust_texture_scale = 2,
        texture_id = int(TEXTURES_ID.PLAYERSHIP2_BLUE),
        max_life = 1200,
        primary_weapon = WEAPONS_ID.SN,
        secondary_weapon = WEAPONS_ID.AS,
        cargo_space = 3,
    },
    PlayerShipsDef {
        texture = "playerShip3",
        thrust_texture = "fire02.png",
        thrust_vel = 1900,
        thrust_texture_scale = 2.5,
        texture_id = int(TEXTURES_ID.PLAYERSHIP3_BLUE),
        max_life = 600,
        primary_weapon = WEAPONS_ID.SN,
        secondary_weapon = WEAPONS_ID.EMP,
        cargo_space = 1,
    },
}

PLAYER_SHIPS_DEFS_ID :: enum {
    PLAYER_SHIP1, //names??
    PLAYER_SHIP2,
    PLAYER_SHIP3,
}

WeaponsDef :: struct {
    name:                 cstring,
    description:          cstring,
    type:                 WEAPONS_TYPE,
    velocity:             f32,
    thrust_vel:           f32,
    cooldown:             f32,
    texture_id:           int,
    contact_lifetime:     u32,
    time_lifetime:        f32,
    has_thrust:           bool,
    thrust_texture_id:    int,
    thrust_texture_scale: f32,
    fire_for_effect:      bool,
    brain_ai:             proc(_: ^Missle, _: f32),
    final_event:          proc(_: linalg.Vector2f32, _: f32),
    final_event_mod1:     f32,
    sound_id:             int,
    damage_base:          f32,
    in_crates:            bool,
}

WEAPONS_DEFS := []WeaponsDef {
    WeaponsDef {
        name = "S0",
        description = "Small laser, fast, but low damage.",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 1,
        velocity = 1600,
        cooldown = 0.2,
        texture_id = int(TEXTURES_ID.LASER_BLUE01),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM1),
        damage_base = 75,
        in_crates = false,
    },
    WeaponsDef {
        name = "S1",
        description = "Upgraded small laser, more damage, slightly slower.",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 2.5,
        velocity = 1600,
        cooldown = 0.3,
        texture_id = int(TEXTURES_ID.LASER_BLUE02),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM1),
        damage_base = 165,
        in_crates = false,
    },
    WeaponsDef {
        name = "SN",
        description = "Sniper Laser, long range, high damage, slow fire rate.",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 3,
        velocity = 3200,
        cooldown = 0.4,
        texture_id = int(TEXTURES_ID.LASER_GREEN02),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM1),
        damage_base = 150,
        in_crates = false,
    },
    WeaponsDef {
        name = "DF",
        description = "Simple, small, and effective.  Goes in a straight line, until it hits something.",
        type = WEAPONS_TYPE.MISSLE,
        contact_lifetime = 1,
        time_lifetime = 1,
        cooldown = 2,
        velocity = 2000,
        thrust_vel = 2000,
        texture_id = int(TEXTURES_ID.SPACE_MISSILES_001),
        has_thrust = true,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        brain_ai = missle_apply_thrust,
        final_event = explosion,
        final_event_mod1 = 5,
        fire_for_effect = true,
        sound_id = int(SFX_ID.MISSLE_LAUNCH),
        damage_base = 350,
        in_crates = true,
    },
    WeaponsDef {
        name = "AS",
        description = "Auto Seeker, can track targets, but has a short range.",
        type = WEAPONS_TYPE.MISSLE,
        contact_lifetime = 1,
        time_lifetime = 2.3,
        cooldown = 4,
        texture_id = int(TEXTURES_ID.SPACE_MISSILES_003),
        has_thrust = true,
        velocity = 1800,
        thrust_vel = 1800,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        brain_ai = brain_missle_seeker_ai,
        final_event = explosion,
        final_event_mod1 = 5,
        sound_id = int(SFX_ID.MISSLE_LAUNCH),
        damage_base = 250,
        in_crates = true,
    },
    WeaponsDef {
        name = "EMP",
        description = "EMP blast, disables enemy ships.",
        type = WEAPONS_TYPE.MISSLE,
        contact_lifetime = 1,
        time_lifetime = 2,
        cooldown = 12,
        texture_id = int(TEXTURES_ID.SPACE_MISSILES_008),
        has_thrust = true,
        velocity = 900,
        thrust_vel = 1200,
        thrust_texture_id = int(TEXTURES_ID.FIRE3),
        thrust_texture_scale = 1.0,
        fire_for_effect = true,
        brain_ai = missle_apply_thrust,
        final_event = emp_explosion,
        final_event_mod1 = 1,
        sound_id = int(SFX_ID.MISSLE_LAUNCH),
        damage_base = 0,
        in_crates = true,
    },
    WeaponsDef {
        name = "ES",
        description = "Enemy Small Laser",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 2,
        cooldown = .3,
        velocity = 1300,
        texture_id = int(TEXTURES_ID.LASER_RED16),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM2),
        damage_base = 40,
        in_crates = false,
    },
    WeaponsDef {
        name = "EM",
        description = "Enemy Medium Laser",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 2.7,
        cooldown = 0.6,
        velocity = 1800,
        texture_id = int(TEXTURES_ID.LASER_RED15),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM2),
        damage_base = 80,
        in_crates = false,
    },
    WeaponsDef {
        name = "EL",
        description = "Enemy Large Laser",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 3,
        cooldown = 0.9,
        velocity = 2000,
        texture_id = int(TEXTURES_ID.LASER_RED14),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM2),
        damage_base = 100,
        in_crates = false,
    },
    WeaponsDef {
        name = "BOSS1",
        description = "Enemy Large Laser",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 4,
        cooldown = .3,
        velocity = 1400,
        texture_id = int(TEXTURES_ID.LASER_RED11),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM2),
        damage_base = 250,
        in_crates = false,
    },
    WeaponsDef {
        name = "PL",
        description = "Plasma ball, massive damage.",
        type = WEAPONS_TYPE.BULLET,
        contact_lifetime = 1,
        time_lifetime = 1,
        cooldown = 4,
        velocity = 1300,
        texture_id = int(TEXTURES_ID.LASER_RED08),
        has_thrust = false,
        thrust_texture_id = int(TEXTURES_ID.FIRE0),
        thrust_texture_scale = 1.0,
        sound_id = int(SFX_ID.LAZERBEAM2),
        damage_base = 150,
        in_crates = true,
    },
}

WEAPONS_ID :: enum {
    S0,
    S1,
    SN,
    DF,
    AS,
    EMP,
    CL,
    ES,
    EM,
    EL,
    BOSS1,
    BOSS2,
    PL,
}

WEAPONS_TYPE :: enum {
    BULLET,
    MISSLE,
}

SFX_ID :: enum {
    LAZERBEAM1,
    LAZERBEAM2,
    MINOR_EXPLOSION,
    MISSLE_LAUNCH,
    MENU_BLIP,
    WEIRD,
    BING,
    ALARM,
    EXPLOSIONS1,
    EXPLOSIONS2,
    EXPLOSIONS3,
    EXPLOSIONS4,
    EXPLOSIONS5,
    EXPLOSIONS6,
    EXPLOSIONS7,
    ITEMBACK,
    BOING_X,
    TELEPORT,
    TICK,
    ITEMPICK1,
    ACID5,
    ACID6,
    FLAGRETURN,
    FLAGDROP,
}

SFXS_FILE :: [SFX_ID]cstring {
    .LAZERBEAM1      = "sfx-lazerbeam1.ogg",
    .LAZERBEAM2      = "sfx-lazerbeam2.ogg",
    .MINOR_EXPLOSION = "sfx-minor_explosion.ogg",
    .MISSLE_LAUNCH   = "sfx-missle-launch.ogg",
    .MENU_BLIP       = "sfx-weird.ogg",
    .WEIRD           = "sfx-bing.ogg",
    .BING            = "sfx-alarm.ogg",
    .ALARM           = "sfx-alarm.ogg",
    .EXPLOSIONS1     = "sfx-explosions-1.ogg",
    .EXPLOSIONS2     = "sfx-explosions-2.ogg",
    .EXPLOSIONS3     = "sfx-explosions-3.ogg",
    .EXPLOSIONS4     = "sfx-explosions-4.ogg",
    .EXPLOSIONS5     = "sfx-explosions-5.ogg",
    .EXPLOSIONS6     = "sfx-explosions-6.ogg",
    .EXPLOSIONS7     = "sfx-explosions-7.ogg",
    .ITEMBACK        = "itemback.ogg",
    .BOING_X         = "boing_x.ogg",
    .TELEPORT        = "teleport.ogg",
    .TICK            = "tick.ogg",
    .ITEMPICK1       = "itempick1.ogg",
    .ACID5           = "acid5.ogg",
    .ACID6           = "acid6.ogg",
    .FLAGRETURN      = "flagreturn.ogg",
    .FLAGDROP        = "flagdrop.ogg",
}

PLAYER_SHIPS_COLORS :: enum {
    BLUE,
    GREEN,
    ORANGE,
    RED,
}

MUSICS_FILE :: []cstring{"filther.ogg", "boss1_unfinished.ogg", "flipside.ogg", "archnisi.ogg"}

MUSICS_ID :: enum {
    BACKGROUND, // Yep these are out of order
    BOSS1,
    RESTART,
    MENU,
}
